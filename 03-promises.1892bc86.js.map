{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAWC,SAASC,cAAc,aACpCC,EAAQF,SAASC,cAAc,uBAC/BE,EAAOH,SAASC,cAAc,sBAC9BG,EAASJ,SAASC,cAAc,wBAyBpC,SAASI,EAAcC,EAAWC,GAChC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,YAAWC,cAErBG,EAAO,CAAEJ,YAAWC,a,GAErBA,E,IAhCPR,EAASgB,iBAAiB,UAE1B,SAAqBC,GACnBA,EAAMC,iBACN,IAAIC,EAAaC,OAAOjB,EAAMkB,OAE9B,GAAIlB,EAAMkB,MAAQ,GAAKjB,EAAKiB,MAAQ,GAAKhB,EAAOgB,MAAQ,EAEtD,YADAvB,EAAAwB,OAAOC,QAAQ,8BAIjB,IAAK,IAAIC,EAAQ,EAAGA,GAASnB,EAAOgB,MAAOG,IACzClB,EAAckB,EAAOL,GAClBM,MAAK,SAAAC,G,IAAGnB,EAASmB,EAATnB,UAAWC,EAASkB,EAATlB,UAClBV,EAAAwB,OAAOK,QAAQ,qBAAqCC,OAAhBrB,EAAU,QAAgBqB,OAAVpB,EAAU,M,IAE/DqB,OAAM,SAAAH,G,IAAGnB,EAASmB,EAATnB,UAAWC,EAASkB,EAATlB,UACnBV,EAAAwB,OAAOC,QAAQ,kBAAkCK,OAAhBrB,EAAU,QAAgBqB,OAAVpB,EAAU,M,IAE/DW,GAAcC,OAAOhB,EAAKiB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formHere = document.querySelector('form.form');\nlet delay = document.querySelector(\"input[name='delay']\");\nlet step = document.querySelector(\"input[name='step']\");\nlet amount = document.querySelector(\"input[name='amount']\");\n\nformHere.addEventListener('submit', generateNow);\n\nfunction generateNow(event) {\n  event.preventDefault();\n  let delayValue = Number(delay.value);\n\n  if (delay.value < 1 || step.value < 1 || amount.value < 1) {\n    Notify.failure('Please check your input!!!');\n    return;\n  }\n\n  for (let count = 1; count <= amount.value; count++) {\n    createPromise(count, delayValue)\n      .then(({ countPass, delayPass }) => {\n        Notify.success(`Fulfilled promise ${countPass} in ${delayPass}ms`);\n      })\n      .catch(({ countPass, delayPass }) => {\n        Notify.failure(`Reject promise ${countPass} in ${delayPass}ms`);\n      });\n    delayValue += Number(step.value);\n  }\n}\n\nfunction createPromise(countPass, delayPass) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ countPass, delayPass });\n      } else {\n        reject({ countPass, delayPass });\n      }\n    }, delayPass);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formHere","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","countPass","delayPass","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delayValue","Number","value","Notify","failure","count","then","param","success","concat","catch"],"version":3,"file":"03-promises.1892bc86.js.map"}